
#Область ПрограммныйИнтерфейс

// Получает доступные каналы
// 
// Возвращаемое значение:
//  Соответствие - Результат запроса
//
Функция ДанныеПоКаналам() Экспорт
	
	Результат = Неопределено;
	
	ОтветСервиса = БезопасныйЗапросGET("v1/channels", Неопределено);
	
	Если ОтветСервиса <> Неопределено
		И ОтветСервиса.Получить("status") = "success" Тогда
		
		Результат = ОтветСервиса.Получить("data");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает идентификатор оператора по адресу электронной почты
//
// Параметры:
//  АдресПочты	 - Строка	 - Адрес электронной почты
// 
// Возвращаемое значение:
//  Число - Идентификатор оператора
//
Функция ПолучитьИдентификаторОператора(АдресПочты) Экспорт
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("email", XMLСтрока(АдресПочты));
	
	МассивКаналов = БезопасныйЗапросGET("v1/operators", СтруктураНастроек);
	
	Если МассивКаналов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор = Неопределено;
	Для Каждого СтрокаОператор Из МассивКаналов["data"] Цикл
		
		Идентификатор = СтрокаОператор["id"];
		Прервать;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

#Область Сообщения

// Выполняет моментальную отправку сообщения на номер
//
// Параметры:
//  НомерТелефона			 - Строка	 - Номер телефона
//  ТекстСообщения			 - Строка	 - 
//  Канал					 - СправочникСсылка.НастройкиНомеровТелефонов	 - Канал
//  Заказ					 - ДокументСсылка.упЗаказ, ЗадачаСсылка.ЗадачиБота	 - Инициатор
//  ДополнительныеПараметры	 - Структура, Неопределено	 - Дополнительные параметры отправки
// 
// Возвращаемое значение:
//  Соответствие - Результат запроса
//
Функция ОтправитьСообщениеНаНомерСразу(НомерТелефона, ТекстСообщения, Канал,
	Заказ = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ОтправитьСообщениеНаНомер(НомерТелефона, ТекстСообщения,
		Канал, Заказ, ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область WebHook

#КонецОбласти

#Область РаботаСИсторией

#КонецОбласти

// Возвращает нужный канал
//
// Параметры:
//  ИдентификаторКанала	 - 	Число - Идентификатор канала
//  Транспорт			 - Строка	 - Транспорт
// 
// Возвращаемое значение:
//  СправочникСсылка.НастройкиНомеровТелефонов - Канал
//
Функция НомерОтправкиПоИдентификатору(ИдентификаторКанала, Транспорт) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиНомеровТелефонов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТР_НастройкиНомеровТелефонов КАК НастройкиНомеровТелефонов
	|ГДЕ
	|	НастройкиНомеровТелефонов.channel_id = &channel_id
	|	И НастройкиНомеровТелефонов.transport = &transport
	|	И НЕ НастройкиНомеровТелефонов.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("channel_id", ИдентификаторКанала);
	Запрос.УстановитьПараметр("transport", Транспорт);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция АдресМетода(ИмяМетода)
	
	ШаблонАдреса = "%1/%2";
	
	Параметры = ПараметрыПодключения();
	
	Возврат СтрШаблон(ШаблонАдреса,
		Параметры.АдресСервиса,
		ИмяМетода);
	
КонецФункции

Функция ПараметрыПодключения()
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Справочники.ТР_НастройкиИнтеграций.Chat2Desk(),
		"token, АдресСервиса, АдресПубликации, НаименованиеПубликации, Таймаут");
	
КонецФункции

Функция ДополнительныеПараметры()
	
	ПараметрыПодключения = ПараметрыПодключения();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", ПараметрыПодключения.token);
	
	ПараметрыПреобразованияJSON = Новый Структура();
	ПараметрыПреобразованияJSON.Вставить("ПрочитатьВСоответствие", Истина);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	ДополнительныеПараметры.Вставить("Таймаут", ПараметрыПодключения.Таймаут);
	ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция БезопасныйЗапросGET(ИмяМетода, СтруктураПараметров, ИмяМетодаЖурнала = "")
	
	ДополнительныеПараметры = ДополнительныеПараметры();
	
	ДанныеВозврата = Неопределено;
	
	Попытка
		
		ДанныеВозврата = КоннекторHTTP.GetJson(АдресМетода(ИмяМетода),
			СтруктураПараметров, ДополнительныеПараметры);
		
	Исключение
		
		ИмяМетодаЖурнала = ?(ПустаяСтрока(ИмяМетодаЖурнала), ИмяМетода, ИмяМетодаЖурнала);
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала(ИмяМетодаЖурнала), , , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция БезопасныйЗапросPUT(ИмяМетода, СтруктураПараметров, ИмяМетодаЖурнала = "")
	
	ДополнительныеПараметры = ДополнительныеПараметры();
	
	ДанныеВозврата = Неопределено;
	
	Попытка
		
		ДанныеВозврата = КоннекторHTTP.PutJson(АдресМетода(ИмяМетода),
			СтруктураПараметров, ДополнительныеПараметры);
		
	Исключение
		
		ИмяМетодаЖурнала = ?(ПустаяСтрока(ИмяМетодаЖурнала), ИмяМетода, ИмяМетодаЖурнала);
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала(ИмяМетодаЖурнала), , , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция БезопасныйЗапросDELETE(ИмяМетода, СтруктураПараметров, ИмяМетодаЖурнала = "")
	
	ДополнительныеПараметры = ДополнительныеПараметры();
	
	ДанныеВозврата = Неопределено;
	
	Попытка
		
		ДанныеВозврата = КоннекторHTTP.DeleteJson(АдресМетода(ИмяМетода),
			СтруктураПараметров, ДополнительныеПараметры);
		
	Исключение
		
		ИмяМетодаЖурнала = ?(ПустаяСтрока(ИмяМетодаЖурнала), ИмяМетода, ИмяМетодаЖурнала);
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала(ИмяМетодаЖурнала), , , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция БезопасныйЗапросPOST(ИмяМетода, СтруктураПараметров, ПараметрыЗапроса = Неопределено,
	ИмяМетодаЖурнала = "")
	
	ДополнительныеПараметры = ДополнительныеПараметры();
	
	ДанныеВозврата = Неопределено;
	
	Если ПараметрыЗапроса <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	КонецЕсли;
	
	Попытка
		
		ДанныеВозврата = КоннекторHTTP.PostJson(АдресМетода(ИмяМетода),
			СтруктураПараметров, ДополнительныеПараметры);
		
	Исключение
		
		ИмяМетодаЖурнала = ?(ПустаяСтрока(ИмяМетодаЖурнала), ИмяМетода, ИмяМетодаЖурнала);
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала(ИмяМетодаЖурнала), , , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция ИмяСобытияЖурнала(ИмяМетода)
	
	Шаблон = НСтр("ru='ИнтеграцияChat2Desk.%1'");
	
	Возврат СтрШаблон(Шаблон, ИмяМетода);
	
КонецФункции

#Область ВнутренниеМетоды

Функция ПолучитьИдентификаторКлиента(НомерТелефона, ИдентификаторКанала, Транспорт)
	
	// Для телеграм нельзя так создавать клиента, они сами появляются в списке
	// когда нажимают /start
	Если Транспорт <> "telegram" Тогда
		
		РезультатСоздания = СоздатьКлиента(НомерТелефона,
			ИдентификаторКанала, Транспорт);
		
		Если РезультатСоздания <> Неопределено Тогда
			Возврат РезультатСоздания;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("phone", XMLСтрока(НомерТелефона));
	
	МассивКлиентов = БезопасныйЗапросGET("v1/clients", СтруктураНастроек);
	
	Если МассивКлиентов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор = Неопределено;
	Для Каждого СтрокаКлиент Из МассивКлиентов["data"] Цикл
		
		Идентификатор =  СтрокаКлиент["id"];
		Прервать;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

Функция СоздатьКлиента(НомерТелефона, ИдентификаторКанала, Транспорт)
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("phone", XMLСтрока(НомерТелефона));
	СтруктураНастроек.Вставить("transport", Транспорт);
	СтруктураНастроек.Вставить("channel_id", XMLСтрока(ИдентификаторКанала));
	
	МассивКлиентов = БезопасныйЗапросPOST("v1/clients", Неопределено, СтруктураНастроек);
	
	Если МассивКлиентов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если МассивКлиентов["data"] = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МассивКлиентов["data"]["id"];
	
КонецФункции

Функция ПолучитьИдентификаторКанала(НомерТелефона)
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("phone", НомерТелефона);
	
	МассивКаналов = БезопасныйЗапросGET("v1/channels", СтруктураНастроек);
	
	Если МассивКаналов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Идентификатор = Неопределено;
	Для Каждого СтрокаКанал Из МассивКаналов["data"] Цикл
		
		Идентификатор = СтрокаКанал["id"];
		Прервать;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

Функция ОтправитьСообщениеНаНомер(НомерТелефона, ТекстСообщения, Канал,
	Заказ = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("Рассылка")
		И ДополнительныеПараметры.Рассылка
		И НЕ ТР_ИнтеграцияБот.ДоступнаОтправкаРассылки(НомерТелефона) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиКанала = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Канал,
		"НомерТелефона, channel_id, transport, АдресПочтыОператора, МаксимальнаяДлинаСообщения,
		|Заблокирован");
	
	// Если канал заблокирован, то не отправляем на него никакие сообщения
	Если НастройкиКанала.Заблокирован = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерТелефонаВнутренний = НомерТелефона;
	
	АдресПочтыОператора = НастройкиКанала.АдресПочтыОператора;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("АдресПочтыОператора")
		И ЗначениеЗаполнено(ДополнительныеПараметры.АдресПочтыОператора) Тогда
		
		АдресПочтыОператора = ДополнительныеПараметры.АдресПочтыОператора;
		
	КонецЕсли;
	
	ИдентификаторОператора	= ПолучитьИдентификаторОператора(АдресПочтыОператора);
	ИдентификаторКанала		= ПолучитьИдентификаторКанала(НастройкиКанала.НомерТелефона);
	ИдентификаторКлиента	= ПолучитьИдентификаторКлиента(НомерТелефонаВнутренний, ИдентификаторКанала,
		НастройкиКанала.transport);
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("client_id"	, ИдентификаторКлиента);
	СтруктураЗапроса.Вставить("transport"	, НастройкиКанала.transport);
	СтруктураЗапроса.Вставить("type"		, "to_client");
	СтруктураЗапроса.Вставить("channel_id"	, ИдентификаторКанала);
	СтруктураЗапроса.Вставить("operator_id"	, ИдентификаторОператора);
	
	ДобавитьКнопкиКлавиатуры(ДополнительныеПараметры, СтруктураЗапроса);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("СсылкаНаPdf") Тогда
			
			СтруктураЗапроса.Вставить("pdf", ДополнительныеПараметры.СсылкаНаPdf);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЧастиСообщения = РазбитьТекстСообщения(ТекстСообщения, НастройкиКанала.МаксимальнаяДлинаСообщения);
	КоличествоЧастейСообщения = ЧастиСообщения.Количество();
	ПаузаМеждуСообщениямиСекунд = 2;
	РезультатОтправки = Неопределено;
	
	Для сч = 1 По КоличествоЧастейСообщения Цикл
		
		Если сч > 1 Тогда
			
			ТР_ИнтеграцияБот.Пауза(ПаузаМеждуСообщениямиСекунд);
			
		КонецЕсли;
		
		ФрагментСообщения = ЧастиСообщения[сч - 1];
		
		СтруктураПараметров = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураЗапроса);
		СтруктураПараметров.Вставить("text", ФрагментСообщения);
		
		РезультатОтправки = БезопасныйЗапросPOST("v1/messages", СтруктураПараметров);
		
		Если РезультатОтправки = Неопределено Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

#КонецОбласти

Процедура ДобавитьКнопкиКлавиатуры(ДополнительныеПараметры, СтруктураЗапроса)
	
	Если ТИПЗНЧ(ДополнительныеПараметры) = ТИП("Структура")
		И ДополнительныеПараметры.Свойство("КнопкиКлавиатуры") Тогда
		
		МассивКнопок = Новый Массив();
		Для Каждого СтрокаКнопки Из ДополнительныеПараметры.КнопкиКлавиатуры Цикл
			
			СтруктураКнопки = Новый Структура();
			
			СтруктураКнопки.Вставить("type", СтрокаКнопки.ТипКнопки);
			СтруктураКнопки.Вставить("text", СтрокаКнопки.Текст);
			
			МассивКнопок.Добавить(СтруктураКнопки);
			
		КонецЦикла;
		
		СтруктураКлавиатуры = Новый Структура();
		СтруктураКлавиатуры.Вставить("buttons", МассивКнопок);
		
		СтруктураЗапроса.Вставить("keyboard", СтруктураКлавиатуры);
		
	КонецЕсли;

КонецПроцедуры

Функция РазбитьТекстСообщения(ТекстСообщения, МаксимальнаяДлинаСообщения)
	
	Результат = Новый Массив;
	
	ДлинаСообщения = СтрДлина(ТекстСообщения);
	
	Если МаксимальнаяДлинаСообщения = 0
		ИЛИ ДлинаСообщения <= МаксимальнаяДлинаСообщения Тогда
		
		Результат.Добавить(ТекстСообщения);
		Возврат Результат;
		
	КонецЕсли;
	
	РазделительСлов = " ";
	ЧастиСообщения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстСообщения, РазделительСлов);
	КоличествоЧастей = ЧастиСообщения.Количество();
	
	НовоеСообщение = Новый Массив;
	ДлинаНовогоСообщения = 0;
	
	Для сч = 1 По КоличествоЧастей Цикл
		
		НужноДобавлять = Истина;
		ЭлементСообщения = ЧастиСообщения[сч - 1];
		
		Если ДлинаНовогоСообщения + СтрДлина(ЭлементСообщения) > МаксимальнаяДлинаСообщения Тогда
			
			Если НовоеСообщение.Количество() = 0 Тогда
				
				НовоеСообщение.Добавить(ЭлементСообщения);
				НужноДобавлять = Ложь;
				
			КонецЕсли;
			
			Результат.Добавить(СтрСоединить(НовоеСообщение, РазделительСлов));
			
			НовоеСообщение.Очистить();
			ДлинаНовогоСообщения = 0;
			
		КонецЕсли;
		
		Если НужноДобавлять = Истина Тогда
			
			НовоеСообщение.Добавить(ЭлементСообщения);
			ДлинаНовогоСообщения = ДлинаНовогоСообщения + СтрДлина(ЭлементСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НовоеСообщение.Количество() > 0 Тогда
		
		Результат.Добавить(СтрСоединить(НовоеСообщение, РазделительСлов));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
